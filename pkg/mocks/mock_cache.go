// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/RuvinSL/webpage-analyzer/pkg/interfaces"
	models "github.com/RuvinSL/webpage-analyzer/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheAnalyzer is a mock of Analyzer interface.
type MockCacheAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockCacheAnalyzerMockRecorder
}

// MockCacheAnalyzerMockRecorder is the mock recorder for MockCacheAnalyzer.
type MockCacheAnalyzerMockRecorder struct {
	mock *MockCaAnalyzer
}

// NewCacheMockAnalyzer creates a new mock instance.
func NewCacheMockAnalyzer(ctrl *gomock.Controller) *MockCaAnalyzer {
	mock := &MockCaAnalyzer{ctrl: ctrl}
	mock.recorder = &MockCacheAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaAnalyzer) EXPECT() *MockCacheAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeURL mocks base method.
func (m *MockCaAnalyzer) AnalyzeURL(ctx context.Context, url string) (*models.AnalysisResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeURL", ctx, url)
	ret0, _ := ret[0].(*models.AnalysisResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeURL indicates an expected call of AnalyzeURL.
func (mr *MockCacheAnalyzerMockRecorder) AnalyzeURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeURL", reflect.TypeOf((*MockCaAnalyzer)(nil).AnalyzeURL), ctx, url)
}

// MockCacheHTMLParser is a mock of HTMLParser interface.
type MockCacheHTMLParser struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHTMLParserMockRecorder
}

// MockCacheHTMLParserMockRecorder is the mock recorder for MockCacheHTMLParser.
type MockCacheHTMLParserMockRecorder struct {
	mock *MockCacheHTMLParser
}

// NewCacheMockHTMLParser creates a new mock instance.
func NewCacheMockHTMLParser(ctrl *gomock.Controller) *MockCacheHTMLParser {
	mock := &MockCacheHTMLParser{ctrl: ctrl}
	mock.recorder = &MockCacheHTMLParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHTMLParser) EXPECT() *MockCacheHTMLParserMockRecorder {
	return m.recorder
}

// DetectHTMLVersion mocks base method.
func (m *MockCacheHTMLParser) DetectHTMLVersion(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectHTMLVersion", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetectHTMLVersion indicates an expected call of DetectHTMLVersion.
func (mr *MockCacheHTMLParserMockRecorder) DetectHTMLVersion(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectHTMLVersion", reflect.TypeOf((*MockCacheHTMLParser)(nil).DetectHTMLVersion), content)
}

// ExtractTitle mocks base method.
func (m *MockCacheHTMLParser) ExtractTitle(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTitle", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractTitle indicates an expected call of ExtractTitle.
func (mr *MockCacheHTMLParserMockRecorder) ExtractTitle(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTitle", reflect.TypeOf((*MockCacheHTMLParser)(nil).ExtractTitle), content)
}

// ParseHTML mocks base method.
func (m *MockCacheHTMLParser) ParseHTML(ctx context.Context, content []byte, baseURL string) (*models.ParsedHTML, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTML", ctx, content, baseURL)
	ret0, _ := ret[0].(*models.ParsedHTML)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseHTML indicates an expected call of ParseHTML.
func (mr *MockCacheHTMLParserMockRecorder) ParseHTML(ctx, content, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTML", reflect.TypeOf((*MockCacheHTMLParser)(nil).ParseHTML), ctx, content, baseURL)
}

// MockCacheLinkChecker is a mock of LinkChecker interface.
type MockCacheLinkChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCacheLinkCheckerMockRecorder
}

// MockCacheLinkCheckerMockRecorder is the mock recorder for MockCacheLinkChecker.
type MockCacheLinkCheckerMockRecorder struct {
	mock *MockCacheLinkChecker
}

// NewCacheMockLinkChecker creates a new mock instance.
func NewCacheMockLinkChecker(ctrl *gomock.Controller) *MockCacheLinkChecker {
	mock := &MockCacheLinkChecker{ctrl: ctrl}
	mock.recorder = &MockCacheLinkCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheLinkChecker) EXPECT() *MockCacheLinkCheckerMockRecorder {
	return m.recorder
}

// CheckLink mocks base method.
func (m *MockCacheLinkChecker) CheckLink(ctx context.Context, link models.Link) models.LinkStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLink", ctx, link)
	ret0, _ := ret[0].(models.LinkStatus)
	return ret0
}

// CheckLink indicates an expected call of CheckLink.
func (mr *MockCacheLinkCheckerMockRecorder) CheckLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLink", reflect.TypeOf((*MockCacheLinkChecker)(nil).CheckLink), ctx, link)
}

// CheckLinks mocks base method.
func (m *MockCacheLinkChecker) CheckLinks(ctx context.Context, links []models.Link) ([]models.LinkStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLinks", ctx, links)
	ret0, _ := ret[0].([]models.LinkStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLinks indicates an expected call of CheckLinks.
func (mr *MockCacheLinkCheckerMockRecorder) CheckLinks(ctx, links interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLinks", reflect.TypeOf((*MockCacheLinkChecker)(nil).CheckLinks), ctx, links)
}

// MockCacheHTTPClient is a mock of HTTPClient interface.
type MockCacheHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHTTPClientMockRecorder
}

// MockCacheHTTPClientMockRecorder is the mock recorder for MockCacheHTTPClient.
type MockCacheHTTPClientMockRecorder struct {
	mock *MockCacheHTTPClient
}

// NewCacheMockHTTPClient creates a new mock instance.
func NewCacheMockHTTPClient(ctrl *gomock.Controller) *MockCacheHTTPClient {
	mock := &MockCacheHTTPClient{ctrl: ctrl}
	mock.recorder = &MockCacheHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHTTPClient) EXPECT() *MockCacheHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheHTTPClient) Get(ctx context.Context, url string) (*models.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*models.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheHTTPClientMockRecorder) Get(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheHTTPClient)(nil).Get), ctx, url)
}

// MockCacheLogger is a mock of Logger interface.
type MockCacheLogger struct {
	ctrl     *gomock.Controller
	recorder *MockCacheLoggerMockRecorder
}

// MockCacheLoggerMockRecorder is the mock recorder for MockCacheLogger.
type MockCacheLoggerMockRecorder struct {
	mock *MockCacheLogger
}

// NewCacheMockLogger creates a new mock instance.
func NewCacheMockLogger(ctrl *gomock.Controller) *MockCacheLogger {
	mock := &MockCacheLogger{ctrl: ctrl}
	mock.recorder = &MockCacheLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheLogger) EXPECT() *MockCacheLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockCacheLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockCacheLoggerMockRecorder) Debug(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockCacheLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockCacheLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockCacheLoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockCacheLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockCacheLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockCacheLoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCacheLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockCacheLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockCacheLoggerMockRecorder) Warn(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockCacheLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockCacheLogger) With(args ...any) interfaces.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockCacheLoggerMockRecorder) With(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockCacheLogger)(nil).With), args...)
}

// MockCacheMetricsCollector is a mock of MetricsCollector interface.
type MockCacheMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMetricsCollectorMockRecorder
}

// MockCacheMetricsCollectorMockRecorder is the mock recorder for MockCacheMetricsCollector.
type MockCacheMetricsCollectorMockRecorder struct {
	mock *MockCacheMetricsCollector
}

// NewCacheMockMetricsCollector creates a new mock instance.
func NewCacheMockMetricsCollector(ctrl *gomock.Controller) *MockCacheMetricsCollector {
	mock := &MockCacheMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockCacheMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheMetricsCollector) EXPECT() *MockCacheMetricsCollectorMockRecorder {
	return m.recorder
}

// RecordAnalysis mocks base method.
func (m *MockCacheMetricsCollector) RecordAnalysis(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAnalysis", success, duration)
}

// RecordAnalysis indicates an expected call of RecordAnalysis.
func (mr *MockCacheMetricsCollectorMockRecorder) RecordAnalysis(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAnalysis", reflect.TypeOf((*MockCacheMetricsCollector)(nil).RecordAnalysis), success, duration)
}

// RecordLinkCheck mocks base method.
func (m *MockCacheMetricsCollector) RecordLinkCheck(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLinkCheck", success, duration)
}

// RecordLinkCheck indicates an expected call of RecordLinkCheck.
func (mr *MockCacheMetricsCollectorMockRecorder) RecordLinkCheck(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLinkCheck", reflect.TypeOf((*MockCacheMetricsCollector)(nil).RecordLinkCheck), success, duration)
}

// RecordRequest mocks base method.
func (m *MockCacheMetricsCollector) RecordRequest(method, path string, statusCode int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRequest", method, path, statusCode, duration)
}

// RecordRequest indicates an expected call of RecordRequest.
func (mr *MockCacheMetricsCollectorMockRecorder) RecordRequest(method, path, statusCode, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequest", reflect.TypeOf((*MockCacheMetricsCollector)(nil).RecordRequest), method, path, statusCode, duration)
}

// MockCacheCache is a mock of Cache interface.
type MockCacheCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCacheCache.
type MockCacheMockRecorder struct {
	mock *MockCacheCache
}

// NewCaMockCache creates a new mock instance.
func NewCaMockCache(ctrl *gomock.Controller) *MockCacheCache {
	mock := &MockCacheCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheCache)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCacheCache) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheCache)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCacheCache) Set(ctx context.Context, key string, value []byte, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheCache)(nil).Set), ctx, key, value, ttl)
}

// MockCaHealthChecker is a mock of HealthChecker interface.
type MockCaHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHealthCheckerMockRecorder
}

// MockCacheHealthCheckerMockRecorder is the mock recorder for MockCaHealthChecker.
type MockCacheHealthCheckerMockRecorder struct {
	mock *MockCaHealthChecker
}

// NewCacheMockHealthChecker creates a new mock instance.
func NewCacheMockHealthChecker(ctrl *gomock.Controller) *MockCaHealthChecker {
	mock := &MockCaHealthChecker{ctrl: ctrl}
	mock.recorder = &MockCacheHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaHealthChecker) EXPECT() *MockCacheHealthCheckerMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockCaHealthChecker) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockCacheHealthCheckerMockRecorder) CheckHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockCaHealthChecker)(nil).CheckHealth), ctx)
}
