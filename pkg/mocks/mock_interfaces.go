// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/RuvinSL/webpage-analyzer/pkg/interfaces"
	models "github.com/RuvinSL/webpage-analyzer/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAnalyzer is a mock of Analyzer interface.
type MockAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer.
type MockAnalyzerMockRecorder struct {
	mock *MockAnalyzer
}

// NewMockAnalyzer creates a new mock instance.
func NewMockAnalyzer(ctrl *gomock.Controller) *MockAnalyzer {
	mock := &MockAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzer) EXPECT() *MockAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeURL mocks base method.
func (m *MockAnalyzer) AnalyzeURL(ctx context.Context, url string) (*models.AnalysisResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeURL", ctx, url)
	ret0, _ := ret[0].(*models.AnalysisResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeURL indicates an expected call of AnalyzeURL.
func (mr *MockAnalyzerMockRecorder) AnalyzeURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeURL", reflect.TypeOf((*MockAnalyzer)(nil).AnalyzeURL), ctx, url)
}

// MockHTMLParser is a mock of HTMLParser interface.
type MockHTMLParser struct {
	ctrl     *gomock.Controller
	recorder *MockHTMLParserMockRecorder
}

// MockHTMLParserMockRecorder is the mock recorder for MockHTMLParser.
type MockHTMLParserMockRecorder struct {
	mock *MockHTMLParser
}

// NewMockHTMLParser creates a new mock instance.
func NewMockHTMLParser(ctrl *gomock.Controller) *MockHTMLParser {
	mock := &MockHTMLParser{ctrl: ctrl}
	mock.recorder = &MockHTMLParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTMLParser) EXPECT() *MockHTMLParserMockRecorder {
	return m.recorder
}

// DetectHTMLVersion mocks base method.
func (m *MockHTMLParser) DetectHTMLVersion(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectHTMLVersion", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetectHTMLVersion indicates an expected call of DetectHTMLVersion.
func (mr *MockHTMLParserMockRecorder) DetectHTMLVersion(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectHTMLVersion", reflect.TypeOf((*MockHTMLParser)(nil).DetectHTMLVersion), content)
}

// ExtractTitle mocks base method.
func (m *MockHTMLParser) ExtractTitle(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTitle", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractTitle indicates an expected call of ExtractTitle.
func (mr *MockHTMLParserMockRecorder) ExtractTitle(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTitle", reflect.TypeOf((*MockHTMLParser)(nil).ExtractTitle), content)
}

// ParseHTML mocks base method.
func (m *MockHTMLParser) ParseHTML(ctx context.Context, content []byte, baseURL string) (*models.ParsedHTML, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTML", ctx, content, baseURL)
	ret0, _ := ret[0].(*models.ParsedHTML)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseHTML indicates an expected call of ParseHTML.
func (mr *MockHTMLParserMockRecorder) ParseHTML(ctx, content, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTML", reflect.TypeOf((*MockHTMLParser)(nil).ParseHTML), ctx, content, baseURL)
}

// MockLinkChecker is a mock of LinkChecker interface.
type MockLinkChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLinkCheckerMockRecorder
}

// MockLinkCheckerMockRecorder is the mock recorder for MockLinkChecker.
type MockLinkCheckerMockRecorder struct {
	mock *MockLinkChecker
}

// NewMockLinkChecker creates a new mock instance.
func NewMockLinkChecker(ctrl *gomock.Controller) *MockLinkChecker {
	mock := &MockLinkChecker{ctrl: ctrl}
	mock.recorder = &MockLinkCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkChecker) EXPECT() *MockLinkCheckerMockRecorder {
	return m.recorder
}

// CheckLink mocks base method.
func (m *MockLinkChecker) CheckLink(ctx context.Context, link models.Link) models.LinkStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLink", ctx, link)
	ret0, _ := ret[0].(models.LinkStatus)
	return ret0
}

// CheckLink indicates an expected call of CheckLink.
func (mr *MockLinkCheckerMockRecorder) CheckLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLink", reflect.TypeOf((*MockLinkChecker)(nil).CheckLink), ctx, link)
}

// CheckLinks mocks base method.
func (m *MockLinkChecker) CheckLinks(ctx context.Context, links []models.Link) ([]models.LinkStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLinks", ctx, links)
	ret0, _ := ret[0].([]models.LinkStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLinks indicates an expected call of CheckLinks.
func (mr *MockLinkCheckerMockRecorder) CheckLinks(ctx, links interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLinks", reflect.TypeOf((*MockLinkChecker)(nil).CheckLinks), ctx, links)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, url string) (*models.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*models.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, url)
}

// Head mocks base method.
func (m *MockHTTPClient) Head(ctx context.Context, url string) (*models.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx, url)
	ret0, _ := ret[0].(*models.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockHTTPClientMockRecorder) Head(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHTTPClient)(nil).Head), ctx, url)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLogger) With(args ...any) interfaces.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), args...)
}

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// RecordAnalysis mocks base method.
func (m *MockMetricsCollector) RecordAnalysis(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAnalysis", success, duration)
}

// RecordAnalysis indicates an expected call of RecordAnalysis.
func (mr *MockMetricsCollectorMockRecorder) RecordAnalysis(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAnalysis", reflect.TypeOf((*MockMetricsCollector)(nil).RecordAnalysis), success, duration)
}

// RecordLinkCheck mocks base method.
func (m *MockMetricsCollector) RecordLinkCheck(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLinkCheck", success, duration)
}

// RecordLinkCheck indicates an expected call of RecordLinkCheck.
func (mr *MockMetricsCollectorMockRecorder) RecordLinkCheck(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLinkCheck", reflect.TypeOf((*MockMetricsCollector)(nil).RecordLinkCheck), success, duration)
}

// RecordRequest mocks base method.
func (m *MockMetricsCollector) RecordRequest(method, path string, statusCode int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRequest", method, path, statusCode, duration)
}

// RecordRequest indicates an expected call of RecordRequest.
func (mr *MockMetricsCollectorMockRecorder) RecordRequest(method, path, statusCode, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequest", reflect.TypeOf((*MockMetricsCollector)(nil).RecordRequest), method, path, statusCode, duration)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, value []byte, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, ttl)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockHealthChecker) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockHealthCheckerMockRecorder) CheckHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockHealthChecker)(nil).CheckHealth), ctx)
}
