// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/RuvinSL/webpage-analyzer/pkg/interfaces"
	models "github.com/RuvinSL/webpage-analyzer/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAnAnalyzer is a mock of Analyzer interface.
type MockAnAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnAnalyzerMockRecorder
}

// MockAnAnalyzerMockRecorder is the mock recorder for MockAnAnalyzer.
type MockAnAnalyzerMockRecorder struct {
	mock *MockAnAnalyzer
}

// NewAnMockAnalyzer creates a new mock instance.
func NewAnMockAnalyzer(ctrl *gomock.Controller) *MockAnAnalyzer {
	mock := &MockAnAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnAnalyzer) EXPECT() *MockAnAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeURL mocks base method.
func (m *MockAnAnalyzer) AnalyzeURL(ctx context.Context, url string) (*models.AnalysisResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeURL", ctx, url)
	ret0, _ := ret[0].(*models.AnalysisResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeURL indicates an expected call of AnalyzeURL.
func (mr *MockAnAnalyzerMockRecorder) AnalyzeURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeURL", reflect.TypeOf((*MockAnAnalyzer)(nil).AnalyzeURL), ctx, url)
}

// MockAnHTMLParser is a mock of HTMLParser interface.
type MockAnHTMLParser struct {
	ctrl     *gomock.Controller
	recorder *MockAnHTMLParserMockRecorder
}

// MockAnHTMLParserMockRecorder is the mock recorder for MockAnHTMLParser.
type MockAnHTMLParserMockRecorder struct {
	mock *MockAnHTMLParser
}

// NewAnMockHTMLParser creates a new mock instance.
func NewAnMockHTMLParser(ctrl *gomock.Controller) *MockAnHTMLParser {
	mock := &MockAnHTMLParser{ctrl: ctrl}
	mock.recorder = &MockAnHTMLParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnHTMLParser) EXPECT() *MockAnHTMLParserMockRecorder {
	return m.recorder
}

// DetectHTMLVersion mocks base method.
func (m *MockAnHTMLParser) DetectHTMLVersion(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectHTMLVersion", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetectHTMLVersion indicates an expected call of DetectHTMLVersion.
func (mr *MockAnHTMLParserMockRecorder) DetectHTMLVersion(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectHTMLVersion", reflect.TypeOf((*MockAnHTMLParser)(nil).DetectHTMLVersion), content)
}

// ExtractTitle mocks base method.
func (m *MockAnHTMLParser) ExtractTitle(content []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTitle", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractTitle indicates an expected call of ExtractTitle.
func (mr *MockAnHTMLParserMockRecorder) ExtractTitle(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTitle", reflect.TypeOf((*MockAnHTMLParser)(nil).ExtractTitle), content)
}

// ParseHTML mocks base method.
func (m *MockAnHTMLParser) ParseHTML(ctx context.Context, content []byte, baseURL string) (*models.ParsedHTML, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTML", ctx, content, baseURL)
	ret0, _ := ret[0].(*models.ParsedHTML)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseHTML indicates an expected call of ParseHTML.
func (mr *MockAnHTMLParserMockRecorder) ParseHTML(ctx, content, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTML", reflect.TypeOf((*MockAnHTMLParser)(nil).ParseHTML), ctx, content, baseURL)
}

// MockAnLinkChecker is a mock of LinkChecker interface.
type MockAnLinkChecker struct {
	ctrl     *gomock.Controller
	recorder *MockAnLinkCheckerMockRecorder
}

// MockAnLinkCheckerMockRecorder is the mock recorder for MockAnLinkChecker.
type MockAnLinkCheckerMockRecorder struct {
	mock *MockAnLinkChecker
}

// NewAnMockLinkChecker creates a new mock instance.
func NewAnMockLinkChecker(ctrl *gomock.Controller) *MockAnLinkChecker {
	mock := &MockAnLinkChecker{ctrl: ctrl}
	mock.recorder = &MockAnLinkCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnLinkChecker) EXPECT() *MockAnLinkCheckerMockRecorder {
	return m.recorder
}

// CheckLink mocks base method.
func (m *MockAnLinkChecker) CheckLink(ctx context.Context, link models.Link) models.LinkStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLink", ctx, link)
	ret0, _ := ret[0].(models.LinkStatus)
	return ret0
}

// CheckLink indicates an expected call of CheckLink.
func (mr *MockAnLinkCheckerMockRecorder) CheckLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLink", reflect.TypeOf((*MockAnLinkChecker)(nil).CheckLink), ctx, link)
}

// CheckLinks mocks base method.
func (m *MockAnLinkChecker) CheckLinks(ctx context.Context, links []models.Link) ([]models.LinkStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLinks", ctx, links)
	ret0, _ := ret[0].([]models.LinkStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLinks indicates an expected call of CheckLinks.
func (mr *MockAnLinkCheckerMockRecorder) CheckLinks(ctx, links interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLinks", reflect.TypeOf((*MockAnLinkChecker)(nil).CheckLinks), ctx, links)
}

// MockAnHTTPClient is a mock of HTTPClient interface.
type MockAnHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAnHTTPClientMockRecorder
}

// MockAnHTTPClientMockRecorder is the mock recorder for MockAnHTTPClient.
type MockAnHTTPClientMockRecorder struct {
	mock *MockAnHTTPClient
}

// NewAnMockHTTPClient creates a new mock instance.
func NewAnMockHTTPClient(ctrl *gomock.Controller) *MockAnHTTPClient {
	mock := &MockAnHTTPClient{ctrl: ctrl}
	mock.recorder = &MockAnHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnHTTPClient) EXPECT() *MockAnHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAnHTTPClient) Get(ctx context.Context, url string) (*models.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*models.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnHTTPClientMockRecorder) Get(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnHTTPClient)(nil).Get), ctx, url)
}

// MockAnLogger is a mock of Logger interface.
type MockAnLogger struct {
	ctrl     *gomock.Controller
	recorder *MockAnLoggerMockRecorder
}

// MockAnLoggerMockRecorder is the mock recorder for MockAnLogger.
type MockAnLoggerMockRecorder struct {
	mock *MockAnLogger
}

// NewAnMockLogger creates a new mock instance.
func NewAnMockLogger(ctrl *gomock.Controller) *MockAnLogger {
	mock := &MockAnLogger{ctrl: ctrl}
	mock.recorder = &MockAnLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnLogger) EXPECT() *MockAnLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockAnLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockAnLoggerMockRecorder) Debug(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockAnLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockAnLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockAnLoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockAnLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockAnLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockAnLoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAnLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockAnLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockAnLoggerMockRecorder) Warn(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockAnLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockAnLogger) With(args ...any) interfaces.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockAnLoggerMockRecorder) With(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockAnLogger)(nil).With), args...)
}

// MockAnMetricsCollector is a mock of MetricsCollector interface.
type MockAnMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockAnMetricsCollectorMockRecorder
}

// MockAnMetricsCollectorMockRecorder is the mock recorder for MockAnMetricsCollector.
type MockAnMetricsCollectorMockRecorder struct {
	mock *MockAnMetricsCollector
}

// NewAnMockMetricsCollector creates a new mock instance.
func NewAnMockMetricsCollector(ctrl *gomock.Controller) *MockAnMetricsCollector {
	mock := &MockAnMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockAnMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnMetricsCollector) EXPECT() *MockAnMetricsCollectorMockRecorder {
	return m.recorder
}

// RecordAnalysis mocks base method.
func (m *MockAnMetricsCollector) RecordAnalysis(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAnalysis", success, duration)
}

// RecordAnalysis indicates an expected call of RecordAnalysis.
func (mr *MockAnMetricsCollectorMockRecorder) RecordAnalysis(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAnalysis", reflect.TypeOf((*MockAnMetricsCollector)(nil).RecordAnalysis), success, duration)
}

// RecordLinkCheck mocks base method.
func (m *MockAnMetricsCollector) RecordLinkCheck(success bool, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLinkCheck", success, duration)
}

// RecordLinkCheck indicates an expected call of RecordLinkCheck.
func (mr *MockAnMetricsCollectorMockRecorder) RecordLinkCheck(success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLinkCheck", reflect.TypeOf((*MockAnMetricsCollector)(nil).RecordLinkCheck), success, duration)
}

// RecordRequest mocks base method.
func (m *MockAnMetricsCollector) RecordRequest(method, path string, statusCode int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRequest", method, path, statusCode, duration)
}

// RecordRequest indicates an expected call of RecordRequest.
func (mr *MockAnMetricsCollectorMockRecorder) RecordRequest(method, path, statusCode, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequest", reflect.TypeOf((*MockAnMetricsCollector)(nil).RecordRequest), method, path, statusCode, duration)
}

// MockAnCache is a mock of Cache interface.
type MockAnCache struct {
	ctrl     *gomock.Controller
	recorder *MockAnCacheMockRecorder
}

// MockAnCacheMockRecorder is the mock recorder for MockAnCache.
type MockAnCacheMockRecorder struct {
	mock *MockAnCache
}

// NewAnMockCache creates a new mock instance.
func NewAnMockCache(ctrl *gomock.Controller) *MockAnCache {
	mock := &MockAnCache{ctrl: ctrl}
	mock.recorder = &MockAnCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnCache) EXPECT() *MockAnCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAnCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAnCacheMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAnCache)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockAnCache) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnCache)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockAnCache) Set(ctx context.Context, key string, value []byte, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockAnCacheMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAnCache)(nil).Set), ctx, key, value, ttl)
}

// MockAnHealthChecker is a mock of HealthChecker interface.
type MockAnHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockAnHealthCheckerMockRecorder
}

// MockAnHealthCheckerMockRecorder is the mock recorder for MockAnHealthChecker.
type MockAnHealthCheckerMockRecorder struct {
	mock *MockAnHealthChecker
}

// NewAnMockHealthChecker creates a new mock instance.
func NewAnMockHealthChecker(ctrl *gomock.Controller) *MockAnHealthChecker {
	mock := &MockAnHealthChecker{ctrl: ctrl}
	mock.recorder = &MockAnHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnHealthChecker) EXPECT() *MockAnHealthCheckerMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockAnHealthChecker) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockAnHealthCheckerMockRecorder) CheckHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockAnHealthChecker)(nil).CheckHealth), ctx)
}
